-- CODIGO SQL -- DDL -- DEFINICIO DE DATOS -- DML --MANIPULACION DE DATOS -- DCL CONTROL DE ADMINISTRACION
-- CREAR BASE DE DATOS 
CREATE DATABASE NOMBRE_BD;
-- ELIMINAR BASE DE DATOS
DROP DATABASE NOMBRE_BD;
-- ELIMINAR UNA TABLA
DROP TABLE NOMBRE_TABLA;
-- ELIMINAR UN REGISTRO
DELETE
-- ACTUALIZAR UN REGISTRO
UPDATE
-- SELECCIONAR REGISTROS EN UNA TABLA
SELECT
-- DEVOLVER VALORES DISTINTOS
DISTINCT
-- SIGNIFICA DONDE
FROM
-- ALTERAMOS LOS CAMPOS DE UNA TABLA
ALTER
-- CONDICIONES EN LAS CONSULTAS
WHERE
----------- OPERADORES LOGICOS
-- CON UNA CONDICION QUE SE CUMPLA REALIZA LA ACCION
OR
-- ES NECESARIO QUE TODAS LAS CONDICIONES SE CUMPLAN PARA REALIZAR LA ACCION
AND
-- ME PERMITE EVALUAR UNA CONDICION DE VALORES 
IN
-- INSERTAR UN REGISTRO EN UNA TABLA
INSERT
-- CONSULTAMOS UN REANGO DE VALORES
BETWEEN
-- EVITAMOS INGRESAR VALORES NULOS
IS NOT NULL
-- ACEPTAR VALORES NULOS
IS NULL
-- AGRUPAMOS
GROUP BY
-- ORDENAMOS
ORDER BY
DESC -- DESCENDENTE
ASC  -- ASCENDENTE
-- ALIAS
AS
-- SACAMOS EL MAXIMO
MAX
-- SACAMOS LOS MINIMOS
MIN
-- CONTAMOS
COUNT
-- SUMAR
SUM
-- SACAR PROMEDIO
AVG
-- BUSQUEDA DE COINCIDENCIAS
LIKE

------ CREAR TABLAS
-- OPCION 1

CREATE TABLE EMPLEADOS_OXXO(
ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(50),
APT NVARCHAR2(50),
APM NVARCHAR2(50),
NSS NUMBER,
NUM_CEL NUMBER,
SUELDO NUMBER,
CORREO NVARCHAR2(50)
);

INSERT INTO EMPLEADOS_OXXO VALUES(1, 'JUAN', 'PEREZ', 'NAVA', 587874545, 8854778545, 20000, 'alsdjej@hrtr');
COMMIT;

SELECT * FROM EMPLEADOS_OXXO;

-- OPCION 2

CREATE TABLE MAESTROS_ENUCOM(
ID NUMBER,
NOMBRE VARCHAR(50),
APT VARCHAR(50),
APM VARCHAR(50),
ESPECIALIDAD VARCHAR(50),
CONSTRAINT PK_MAESTRO PRIMARY KEY(ID)
);

INSERT INTO MAESTROS_ENUCOM VALUES(1, 'SONIA', 'JUAREZ', 'RUIZ', 'FISICA');
COMMIT;

SELECT * FROM MAESTROS_ENUCOM;

-- OPCION 3

CREATE TABLE PRODUCTOS_OXXO( 
ID NUMBER,
NOMBRE VARCHAR2(50),
MARCA NVARCHAR2(50),
SABOR NVARCHAR2(50),
EXISTENCIA NUMBER,
PRECIO NUMBER,
FECHA_CADUCIDAD DATE,
PRIMARY KEY(ID)
);

DROP TABLE PRODUCTOS_OXXO;

INSERT INTO PRODUCTOS_OXXO VALUES(1 , 'BARRITAS', 'MARINELA', 'DULCE', 20, 20, '22/05/24');
INSERT INTO PRODUCTOS_OXXO VALUES(2 , 'PINGUINOS', 'MARINELA', 'DULCE', 10, 26,'02/08/23');
INSERT INTO PRODUCTOS_OXXO VALUES(3 , 'GANSITOS', 'MARINELA', 'DULCE', 15, 16,'15/10/23');
INSERT INTO PRODUCTOS_OXXO VALUES(4 , 'CHORROLES', 'MARINELA', 'DULCE', 8, 22,'11/09/23');
INSERT INTO PRODUCTOS_OXXO VALUES(5 , 'RUNNERS', 'BARCEL', 'SALADO', 5, 18,'22/11/24');

INSERT INTO PRODUCTOS_OXXO VALUES (6, 'BARRITAS PIÑA', 'MARINELA', 'DULCE',10, 15, '22/05/24');
INSERT INTO PRODUCTOS_OXXO VALUES (7, 'TOTIS', 'DESCONOCIDO', 'SALADO',15, 5, '10/11/24');
INSERT INTO PRODUCTOS_OXXO VALUES (8, 'PANDITAS', 'RICOLINO', 'DULCE',5, 18, '13/04/24');
INSERT INTO PRODUCTOS_OXXO VALUES (9, 'TOREADAS', 'BARCEL', 'SALADO',10, 10, '22/06/24');
INSERT INTO PRODUCTOS_OXXO VALUES (10, 'PASITAS', 'RICOLINO', 'DULCE',10, 15, '13/04/24');

INSERT INTO PRODUCTOS_OXXO VALUES(11, 'PAPAS', 'SABRITAS', 'SALADA', 30, 17, '22/05/2024');
INSERT INTO PRODUCTOS_OXXO VALUES(12, 'NITO', 'BIMBO', 'DULCE', 15, 18, '27/08/2024');
INSERT INTO PRODUCTOS_OXXO VALUES(13, 'EMPERADOR', 'GAMESA', 'DULCE', 37, 20, '12/02/2027');
INSERT INTO PRODUCTOS_OXXO VALUES(14, 'PULPARINDO', 'DE LA ROSA', 'ACIDO', 90, 5, '14/12/2025');
INSERT INTO PRODUCTOS_OXXO VALUES(15, 'COCA COLA', 'FEMSA', 'DULCE', 150, 20, '03/11/2027');

INSERT INTO PRODUCTOS_OXXO VALUES(16, 'EMPERADOR', 'GAMESA', 'DULCE', 15, 14, '28/01/2024');
INSERT INTO PRODUCTOS_OXXO VALUES(17, 'AGUA', 'CIEL', 'INSABORA', 30, 10, '18/11/2030');
INSERT INTO PRODUCTOS_OXXO VALUES(18, 'RUNNERS', 'BARCEL', 'PICOSO', 10, 12, '01/10/2028');
INSERT INTO PRODUCTOS_OXXO VALUES(19, 'CHELADA', 'SOL', 'SALADO', 5, 22, '13/08/2023');
INSERT INTO PRODUCTOS_OXXO VALUES(20, 'JAMON', 'FUD', 'SALADO', 30, 40, '26/01/2027');

INSERT INTO PRODUCTOS_OXXO VALUES (21, 'Galletas Emperador', 'Gamesa', 'dulce', 15, 50, '12/06/2023');
INSERT INTO PRODUCTOS_OXXO VALUES (22, 'Refresco', 'Fanta', 'dulce', 15, 35, '15/09/2023');
INSERT INTO PRODUCTOS_OXXO VALUES (23, 'Cerveza', 'Corona', 'dulce', 32.5, 56, '08/06/2025');
INSERT INTO PRODUCTOS_OXXO VALUES (24, 'Paleta', 'Tutsi Pop', 'dulce', 3, 78, '12/06/2023');

COMMIT;

SELECT * FROM PRODUCTOS_OXXO;



INSERT INTO EMPLEADOS_OXXO VALUES(1, 'JUAN', 'PEREZ', 'NAVA', 587874545, 8854778545, 20000, 'alsdjej@gmail.com');
INSERT INTO EMPLEADOS_OXXO VALUES(2, 'PEDRO', 'MORENO', 'NAVA', 587874545, 88963258, 20000, 'pedro@gmail.com');
INSERT INTO EMPLEADOS_OXXO VALUES(3, 'LEON', 'GUTIERREZ', 'GUTIERREZ', 589562536, 32569852, 21000, 'leon@gmail.com');
INSERT INTO EMPLEADOS_OXXO VALUES(4, 'MARIA', 'DE LA ROSA', 'JUAREZ', 98896332, 7563689101, 15000, 'maria@gmail.com');
INSERT INTO EMPLEADOS_OXXO VALUES(5, 'ISABEL', 'LOPEZ', 'BOTELLO', 1257781455, 78500058, 32000, 'isabel@gmail.com');

INSERT INTO EMPLEADOS_OXXO VALUES (6, 'MISAEL', 'MERCEDEZ', 'MASIAS', 5569322544, 2214153633, 6000,'misael@gmail.com');
INSERT INTO EMPLEADOS_OXXO VALUES (7, 'BENITO', 'BUENMUNDO', 'BENITEZ', 8856455211, 6632321154, 5000,'benito@gmail.com');
INSERT INTO EMPLEADOS_OXXO VALUES (8, 'DIANA', 'DOMINGUEZ', 'DOMINGUEZ', 1386455722, 2266556644, 2000,'diana@gmail.com');
INSERT INTO EMPLEADOS_OXXO VALUES (9, 'GERARDO', 'GUTIERREZ', 'GOMEZ', 11323569548, 7146283513, 7000,'gerardo@gmail.com');
INSERT INTO EMPLEADOS_OXXO VALUES (10, 'ULISES', 'BELEZ', 'BELTRAN', 1993974625, 1144665577, 2000,'ulises@gmail.com');

INSERT INTO EMPLEADOS_OXXO VALUES(11,'VICTOR','LASCARES','GALLARDO',14434654,23646890,22000,'victor@gmail.com');
INSERT INTO EMPLEADOS_OXXO VALUES(12,'MANUEL','FLORES','RAMOS',12434134,23646464,19000,'manuel@gmail.com');
INSERT INTO EMPLEADOS_OXXO VALUES(13,'OSVALDO','LOPEZ','PIMENTEL',82434134,93646464,27000,'osvaldo@gmail.com');
INSERT INTO EMPLEADOS_OXXO VALUES(14,'FRACISCO','FERNANDEZ','ORTIZ',52434134,23646464,18000,'francisco@gmail.com');

INSERT INTO EMPLEADOS_OXXO VALUES(15, 'Marco', 'Mendez', 'Ruiz', 1287361, 2228153916, 18000,'marco.men.ru@gmail.com');
INSERT INTO EMPLEADOS_OXXO VALUES(16, 'Elizabeth', 'Vazquez', 'Amador', 242362, 2221094561, 27000,'eli.va_87@gmail.com');
INSERT INTO EMPLEADOS_OXXO VALUES(17, 'Maria', 'Calderon', 'Carreño', 2138541, 5552127890, 23000,'maria.26@gmail.com');
INSERT INTO EMPLEADOS_OXXO VALUES(18, 'Eduardo', 'Martinez', 'Sandoval', 342342465, 5556789815, 30000 ,'edu.ma.san_72@gmail.com');
INSERT INTO EMPLEADOS_OXXO VALUES(19, 'Alejandro', 'Díaz', 'Rosas', 24233451, 2278554391, 10000, 'diaz_ros@gmail.com');

INSERT INTO EMPLEADOS_OXXO VALUES(20, 'JUAN', 'MORALES', 'LOPEZ', 12516827, 2761074802, 30000, 'juanml@gmail.com');
INSERT INTO EMPLEADOS_OXXO VALUES(21, 'ISABEL', 'RODRIGUEZ', 'HERNANDEZ', 84625490, 3446906422, 30262, 'isabel@gmail.com');
INSERT INTO EMPLEADOS_OXXO VALUES(22, 'MARCO', 'MORALES', 'PILAR', 12534658, 2745396483, 24000, 'marc@gmail.com');
INSERT INTO EMPLEADOS_OXXO VALUES(23, 'JORGE', 'LOPEZ', 'ROMERO', 94673523, 2846736522, 24000, 'george@gmail.com');
INSERT INTO EMPLEADOS_OXXO VALUES(24, 'IRAI', 'MUNGUIA', 'JUAREZ', 26451342, 2745625378, 24000, 'irai@gmail.com');
COMMIT;


-- SENTENCIAS SQL -- DML

-- MOSTRAMOS LOS REGISTROS DE LA TABLA CON TODO LOS CAMPOS
SELECT * FROM EMPLEADOS_OXXO; 
-- SELECCIONAR QUE CAMPOS VAMOS A MOSTRAR
SELECT ID,NOMBRE,SUELDO FROM EMPLEADOS_OXXO;
-- ACTUALIZAR UN REGISTRO DE LA TABLA
UPDATE EMPLEADOS_OXXO SET SUELDO=38987 WHERE ID=2;
COMMIT;
-- ELIMINAR REGISTRO DE LA TABLA
DELETE EMPLEADOS_OXXO WHERE ID=24;
COMMIT; -- SE GUARDA EN EL DISCO LOCA C
-- ESTAMOS BUSCANDO TODOS LOS CAMPO DE UN REGISTRO EN ESPECIFICO
SELECT * FROM EMPLEADOS_OXXO WHERE NOMBRE='Alejandro';
-- OPERADORES LOGICOS
SELECT * FROM EMPLEADOS_OXXO WHERE NOMBRE='Alejandro' OR SUELDO = 10000;
SELECT * FROM EMPLEADOS_OXXO WHERE NOMBRE='Alejandro' AND SUELDO = 11000;
-- RANGO DE VALORES
SELECT * FROM EMPLEADOS_OXXO WHERE ID IN (2,5,10);
--
SELECT * FROM EMPLEADOS_OXXO WHERE ID BETWEEN 10 AND 15;
--LIKE
SELECT * FROM EMPLEADOS_OXXO WHERE NOMBRE LIKE 'L%';
SELECT * FROM EMPLEADOS_OXXO WHERE NOMBRE LIKE '%A%';
SELECT * FROM EMPLEADOS_OXXO WHERE NOMBRE LIKE '%E';

-- SUBCONSULTAS
SELECT ID FROM EMPLEADOS_OXXO WHERE ID =(SELECT COUNT(ID) FROM EMPLEADOS_OXXO );
-- CONTAR POR NOMBRE
SELECT ID FROM EMPLEADOS_OXXO WHERE ID = (SELECT COUNT (NOMBRE) FROM EMPLEADOS_OXXO WHERE NOMBRE = 'JUAN');
-- CONCAT
SELECT NOMBRE, APT, CONCAT(SUELDO, ' PESOS') AS SUELDO_MXM FROM EMPLEADOS_OXXO;
--MAXIMOS
SELECT * FROM EMPLEADOS_OXXO WHERE SUELDO = (SELECT MAX(SUELDO) FROM EMPLEADOS_OXXO);
-- MINIMO
SELECT * FROM EMPLEADOS_OXXO WHERE SUELDO = (SELECT MIN(SUELDO) FROM EMPLEADOS_OXXO);

--AGRUPAR
SELECT NOMBRE, APT, COUNT(SUELDO) FROM EMPLEADOS_OXXO GROUP BY NOMBRE, APT, SUELDO;
-- PROMEDIO
SELECT AVG(SUELDO) FROM EMPLEADOS_OXXO WHERE NOMBRE='GERARDO';


CREATE TABLE PRODUCTOS_OXXO( 
ID NUMBER,
NOMBRE VARCHAR2(50),
MARCA NVARCHAR2(50),
SABOR NVARCHAR2(50),
EXISTENCIA NUMBER,
PRECIO NUMBER,
FECHA_CADUCIDAD DATE,
PRIMARY KEY(ID)
);
SELECT * FROM PRODUCTOS_OXXO;

-- EJERCICIO
--MOSTRAR LOS PRODUCTOS CON LA MARCA MARINELA
SELECT * FROM PRODUCTOS_OXXO WHERE MARCA='MARINELA';

--CONTAR CUANTOS PRODUCTOS TENGO POR MARCA
SELECT MARCA, COUNT(ID) FROM PRODUCTOS_OXXO GROUP BY MARCA;

--MOSTRAR LOS PRODUCTOS CON CADUCIDAD 02/08/23
SELECT * FROM PRODUCTOS_OXXO WHERE FECHA_CADUCIDAD='02/08/23';

--SACAR EL PROMEDIO DE LOS PRODUCTOS MAYORES A $15
SELECT AVG(PRECIO) FROM PRODUCTOS_OXXO WHERE PRECIO > 15;

--SUMAR TODOS LOS PRODUCTOS DE SABOR DULCE
SELECT SUM(EXISTENCIA) FROM PRODUCTOS_OXXO WHERE SABOR='DULCE' OR SABOR='dulce';

--CONTAR LOS PRODUCTOS POR SABOR
SELECT SABOR, COUNT(ID) FROM PRODUCTOS_OXXO GROUP BY SABOR;

--MOSTRAR LOS PRODUCTOS CON SABOR PICOSO Y AGRUPARLOS POR CADUCIDAD
SELECT FECHA_CADUCIDAD, SABOR FROM PRODUCTOS_OXXO WHERE SABOR='PICOSO' GROUP BY FECHA_CADUCIDAD, SABOR;

--CALCULAR EL PROMEDIO DE LOS PRODUCTOS DE LA MARCA BARCEL
SELECT AVG(PRECIO) FROM PRODUCTOS_OXXO WHERE MARCA='BARCEL';

--SACAR EL PRODUCTO MAS CARO
SELECT * FROM PRODUCTOS_OXXO WHERE PRECIO = (SELECT MAX(PRECIO) FROM PRODUCTOS_OXXO);

--SACAR EL PRODUCTO MAS ECONOMICO
SELECT * FROM PRODUCTOS_OXXO WHERE PRECIO = (SELECT MIN(PRECIO) FROM PRODUCTOS_OXXO);

--CONCANTENAR EN EL CAMPO PRECIO LA PALABRA PESOS
SELECT NOMBRE, MARCA, CONCAT(PRECIO, ' PESOS MX') AS SUELDO_MXM FROM PRODUCTOS_OXXO;

--MOSTRAR LOS REGISTROS DEL ID 5 AL 18
SELECT * FROM PRODUCTOS_OXXO WHERE ID BETWEEN 5 AND 18;

--BUSCAR LOS PRODUCTOS QUE INICEN CON LA LETRA B
SELECT * FROM PRODUCTOS_OXXO WHERE NOMBRE LIKE 'B%';

--MOSTRAR LOS PRODUCTOS POR SABOR Y QUE CADUQUEN 22/05/24
SELECT NOMBRE, SABOR FROM PRODUCTOS_OXXO WHERE FECHA_CADUCIDAD = '22/05/24' GROUP BY NOMBRE, SABOR;

---------NULL
CREATE TABLE PROYECTOS_EMP(
ID NUMBER PRIMARY KEY NOT NULL,
NOMBRE NVARCHAR2(50) NOT NULL,
DURACION DATE NULL,
LIDER NVARCHAR2(50) NOT NULL
);

INSERT INTO PROYECTOS_EMP VALUES(1, 'LUIS', NULL, 'JOSE');
INSERT INTO PROYECTOS_EMP VALUES(2, 'LUIS', '25/06/23', 'JOSE');
COMMIT; -- PERSISTENCIA DE DATOS, PARA QUE NUESTRAS OPERACIONES SEAN EJECUTADAS DE MANERA EFECTIVA

------ NOMBRE DEL REGISTRO DONDE DURCION ES NULL
SELECT * FROM PROYECTOS_EMP WHERE DURACION IS NULL;

------ NOMBRE DE REGISTRO DONDE DURACION NO SEA NULL
SELECT * FROM PROYECTOS_EMP WHERE DURACION IS NOT NULL;

---- BORRAR LOS REGISTROS DE UNA TABLA
DELETE FROM PROYECTOS_EMP;

ROLLBACK; -- RECUPERAR REGISTROS DE LA TABLA HASTA EL COMMIT

SELECT * FROM PROYECTOS_EMP;

 -- TRUNCATE -- ELIMINAR LOS REGISTROS DE LA TABLA DE MANERA EFECTIVA DEL GESTOR Y DISCO DURO
TRUNCATE TABLE PROYECTOS_EMP;
ROLLBACK;

-- DEFAULTS
CREATE TABLE PERSONA_FISCAL(
ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(50) NOT NULL,
APP NVARCHAR2(50) NOT NULL,
APM NVARCHAR2(50) NOT NULL,
EDAD NUMBER,
ESTADO_CIVIL NVARCHAR2(50) DEFAULT 'SOLTERO'
);


INSERT INTO PERSONA_FISCAL VALUES(1, 'VICTOR', 'MENDEZ', 'SORIANO', NULL, 'CASADO');
INSERT INTO PERSONA_FISCAL VALUES(2, 'VICTOR', 'MENDEZ', 'SORIANO', 25, DEFAULT);
INSERT INTO PERSONA_FISCAL VALUES(3, 'VICTOR', 'MENDEZ', 'SORIANO', 25, NULL);

COMMIT;

SELECT * FROM PERSONA_FISCAL;

 ---- CREAR UNA TABLA NORMALIZADO
 -- NO ACEPTE VALORES NULOS
 -- COMIT 
 -- ELIMINAR LOS REGISTROS Y RECUPERAR
 -- VANA ELIMINAR DE MANERA EFECTIVA LOS REGISTROS
 -- DEFAULT
 -- 4 REGISTROS
 DROP TABLE PERSPNA_DM;
 
 CREATE TABLE PERSPNA_DM(
 ID NUMBER PRIMARY KEY NOT NULL,
 NOMBRE NVARCHAR2(50) NOT NULL,
 APL NVARCHAR2(50) NOT NULL,
 EDAD NUMBER NOT NULL,
 ALERGIAS NVARCHAR2(50) DEFAULT 'NINGUNA' NOT NULL,
 LESIONES NVARCHAR2(50) DEFAULT 'NINGUNA' NOT NULL
 );

INSERT INTO PERSPNA_DM VALUES(1, 'JUAN', 'PEREZ', 18, DEFAULT, DEFAULT);
INSERT INTO PERSPNA_DM VALUES(2, 'PEDRO', 'RAMIREZ', 22, DEFAULT, 'BRAZO');
INSERT INTO PERSPNA_DM VALUES(3, 'MARIA', 'GUTIERREZ', 19, 'POLVO', DEFAULT);
INSERT INTO PERSPNA_DM VALUES(4, 'JUANA', 'LA CUBANA', 20, 'CAFE', 'HOMBRO');

COMMIT;

SELECT * FROM PERSPNA_DM;

DELETE FROM PERSPNA_DM;

ROLLBACK;

TRUNCATE TABLE PERSPNA_DM;

-- CASE

CREATE TABLE TRANSACCIONES_B(
ID NUMBER PRIMARY KEY NOT NULL,
NUM_TRANSC NUMBER NOT NULL,
TIPO_TRANS NUMBER NOT NULL --1 RETIRO, 2 DEPOSITO, 3 CONSULTA, 4 OTROS
);

INSERT INTO TRANSACCIONES_B VALUES(1, 340, 1);
INSERT INTO TRANSACCIONES_B VALUES(2, 320, 2);
INSERT INTO TRANSACCIONES_B VALUES(3, 350, 3);
INSERT INTO TRANSACCIONES_B VALUES(4, 3500, 4);
COMMIT;

SELECT * FROM TRANSACCIONES_B;

SELECT ID, NUM_TRANSC, TIPO_TRANS,
(CASE TIPO_TRANS
WHEN 1 THEN 'RETIRO'
WHEN 2 THEN 'DEPOSITO'
WHEN 3 THEN 'CONSULTAR'
WHEN 4 THEN 'OTROS'
END
) AS DETALLE_TRANS 
FROM TRANSACCIONES_B WHERE ID=2;


-- EJERCICIO -- NO ESTA NORMALIZADA
CREATE TABLE TELEFONOS(
ID NUMBER PRIMARY KEY NOT NULL,
MARCA NVARCHAR2(50) NOT NULL,
MODELO NVARCHAR2(50) NOT NULL,
PRECIO NUMBER NOT NULL,
SO NVARCHAR2(10) DEFAULT 'ANDROID',
COLOR NUMBER NOT NULL, -- 1 BLANCO. 2 ROJO, 3 AZUL, 4 NEGRO, 5 OTRO
COMPANIA NVARCHAR2(50)
);

INSERT INTO TELEFONOS VALUES (1, 'SMANSUNG', 'GALAXY S20', 20000, DEFAULT, 1, 'TELCEL');
INSERT INTO TELEFONOS VALUES (2, 'APPLE', 'IPHONE 11', 30000, 'IOS', 3, 'MOVISTAR');
INSERT INTO TELEFONOS VALUES (3, 'XIAOMI', 'REDMI NOTE 10', 6000, 'DEFAULT', 1, 'ATT');
INSERT INTO TELEFONOS VALUES (4, 'OPPO', 'RENO 10', 3000, DEFAULT, 2, 'UNEFON');
INSERT INTO TELEFONOS VALUES(5, 'SAMSUNG', 'S20ULTRA', 32000, DEFAULT, 4, 'TELCEL' );
INSERT INTO TELEFONOS VALUES(6, 'HUAWEI', 'MATE 30', 21000, 'HARMONYOS', 2, NULL );
INSERT INTO TELEFONOS VALUES(7, 'OPPO', 'N10', 15500, DEFAULT, 1, 'MOVISTAR' );
INSERT INTO TELEFONOS VALUES(8, 'APPLE', 'IPHONE 13PRO', 35000, 'IOS', 3, 'TELCEL' );
INSERT INTO TELEFONOS VALUES(9, 'SAMSUNG', 'S22', 33500, DEFAULT, 4, 'ATT' );
INSERT INTO TELEFONOS VALUES(10, 'HUAWEI', 'XLR3', 5000, DEFAULT, 4, 'UNEFON');
INSERT INTO TELEFONOS VALUES(11, 'XIAOMI', 'REDX3000', 10000, 'HARMONY', 4, 'MOVISTAR');
INSERT INTO TELEFONOS VALUES(12, 'SAMSUNG', 'FREEDOM20', 8000, DEFAULT, 4, 'UNEFON');
INSERT INTO TELEFONOS VALUES(13, 'APPLE', 'IWANTYOUMONEY', 50000, 'IOS', 4, 'TELCEL');
INSERT INTO TELEFONOS VALUES(14, 'MOTOROLA', 'RUMRUM', 3000, DEFAULT, 4, 'MOVISTAR');
INSERT INTO TELEFONOS VALUES (15, 'HUAWEI', 'Z7', 5000, DEFAULT, 2, 'TELCEL');
INSERT INTO TELEFONOS VALUES (16, 'SAMSUNG', 'A32', 5600, DEFAULT, 3, 'MOVISTAR');
INSERT INTO TELEFONOS VALUES (17, 'MOTOROLA', 'G20', 4000, DEFAULT, 1, 'MOVISTAR');
INSERT INTO TELEFONOS VALUES (18, 'HUAWEI', 'T90', 7000, DEFAULT, 2, 'TELCEL');
INSERT INTO TELEFONOS VALUES(19, 'HUAWEI', 'P30', 6000, DEFAULT, 2, 'TELCEL');
INSERT INTO TELEFONOS VALUES(20, 'SAMSUNG', 'GALAXY', 7000, DEFAULT, 3, 'TELCEL');
INSERT INTO TELEFONOS VALUES(21, 'XIAOMI', 'X5', 9000, DEFAULT, 1, 'TELCEL');
INSERT INTO TELEFONOS VALUES(22, 'SAMSUNG', 'S20', 10000, DEFAULT, 4, 'TELCEL');
INSERT INTO TELEFONOS VALUES(23, 'HUAWEI', 'P20', 4000, DEFAULT, 3, 'TELCEL');
INSERT INTO TELEFONOS VALUES(24, 'SAMSUNG', 'A04', 5000, DEFAULT, 5, 'TELCEL');
COMMIT;

DELETE FROM TELEFONOS;

SELECT * FROM TELEFONOS;

-- MOSTRAR CON CASE LOS COLORES DE LOS CELULARES
SELECT ID, MODELO, COLOR,
(CASE COLOR
WHEN 1 THEN 'BLANCO'
WHEN 2 THEN 'ROJO'
WHEN 3 THEN 'AZUL'
WHEN 4 THEN 'NEGRO'
WHEN 5 THEN 'OTROS'
END
) AS DETALLE_COLOR 
FROM TELEFONOS;

---CLASIFICAR LOS PRECIOS CON CASE ---- 0--1000 'PRECIO BARATO'  <1000 PERO MENOSRES A >2500 'PRECIO REGULAR' <2500 'PRECIO CARO'
SELECT ID, MODELO, PRECIO,
(CASE
WHEN PRECIO>0 AND PRECIO <= 1000 THEN 'PRECIO BARATO'
WHEN PRECIO>100 AND PRECIO <= 2500 THEN 'PRECIO REGULAR'
WHEN PRECIO > 2501 THEN 'PRECIO CARO'
END
) AS PRECIOS_RANGOS, MARCA
FROM TELEFONOS;

---CONTAR CUANTOS CELULARES TENGO POR MARCA CASE
SELECT 
    COUNT(CASE WHEN MARCA = 'SAMSUNG' OR MARCA = 'SMANSUNG' THEN 1 END) AS SAMSUNG,
    COUNT(CASE WHEN MARCA = 'APPLE' THEN 1 END) AS APPLE,
    COUNT(CASE WHEN MARCA = 'OPPO' THEN 1 END) AS OPPO,
    COUNT(CASE WHEN MARCA = 'XIAOMI' THEN 1 END) AS XIAOMI,
    COUNT(CASE WHEN MARCA = 'HUAWEI' THEN 1 END) AS HUAWEI,
    COUNT(CASE WHEN MARCA = 'MOTOROLA' THEN 1 END) AS MOTOROLA
FROM TELEFONOS;

SELECT MARCA, COUNT(ID) FROM TELEFONOS GROUP BY MARCA;

---SACAR EL PROMEDIO DE LOS CELULARES DE LA COMPAÑIA TELCEL
SELECT AVG(PRECIO) FROM TELEFONOS WHERE COMPANIA='TELCEL';

---MOSTRA EL CELULAR MAS CARO
SELECT * FROM TELEFONOS WHERE PRECIO = (SELECT MAX(PRECIO) FROM TELEFONOS);

---MOSTRAR EL CELULAR MAS BARATO
SELECT * FROM TELEFONOS WHERE PRECIO = (SELECT MIN(PRECIO) FROM TELEFONOS);

---AGRUPAR LOS CELULARES POR MARCA
SELECT MARCA, COUNT(ID) FROM TELEFONOS GROUP BY MARCA;

--CALCULAR LA SUMA TOTAL DE LOS PRECIOS DE LOS CELULARES
SELECT SUM(PRECIO) FROM TELEFONOS;

-- CARDINALIDAD --TABLAS FUERTES Y TABLAS DEBIL

-- Uno a Uno--------------------------------------------
CREATE TABLE PERSONA_FISCAL(
ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(50) NOT NULL,
APP NVARCHAR2(50) NOT NULL,
APM NVARCHAR2(50) NOT NULL,
EDAD NUMBER,
ESTADO_CIVIL NVARCHAR2(50) DEFAULT 'SOLTERO'
);

CREATE TABLE ACTA(
ID NUMBER PRIMARY KEY NOT NULL,
NUM_REGISTRO NUMBER NOT NULL,
LUGAR_NACIMIENTO NVARCHAR2(50) NOT NULL,
FECHA_REGISTRO DATE NOT NULL,
ID_PERSONA  NUMBER NOT NULL,
FOREIGN KEY(ID_PERSONA) REFERENCES PERSONA_FISCAL(ID)
);

SELECT * FROM PERSONA_FISCAL;
SELECT * FROM ACTA;

INSERT INTO ACTA VALUES(1, 589, 'PEBLA', '22/05/96', 1);

-- INNER JOIN

SELECT p.nombre, a.lugar_nacimiento
FROM PERSONA_FISCAL p
INNER JOIN ACTA a
ON p.id=a.id;

-- UNO A MUCHOS------------------------------------

CREATE TABLE DUENO(
ID NUMBER PRIMARY KEY NOT NULL,
NOMBRE NVARCHAR2(50) NOT NULL,
CORREO NVARCHAR2(50) NOT NULL,
FECHA DATE
);

INSERT INTO DUENO VALUES(1, 'JESUS', 'jesus@gmail.com', '10/05/1993');
COMMIT;

SELECT *  FROM DUENO;

CREATE TABLE CUADERNO(
ID NUMBER PRIMARY KEY NOT NULL,
NOMBRE NVARCHAR2(50) NOT NULL,
FECHA_CREACION DATE NOT NULL,
FECHA_MODIFICACION DATE NOT NULL,
NUM_PAGINAS NUMBER DEFAULT 0,
ID_DUENO NUMBER NOT NULL,
FOREIGN KEY(ID_DUENO) REFERENCES DUENO(ID)
);

INSERT INTO CUADERNO VALUES(1, 'NOTAS SQL', '10/05/2000', '15/06/2000', DEFAULT, 1);
INSERT INTO CUADERNO VALUES(2, 'NOTAS JAVA POO', '10/05/2000', '15/06/2000', 10, 1);
COMMIT

SELECT *
FROM DUENO 
INNER JOIN CUADERNO 
ON  dueno.id = cuaderno.id_dueno;


------------------------------------------- EJERCICIO UNO A MUCHOS -----------------------------------------------

CREATE TABLE CLIENTES(
idCliente NUMBER PRIMARY KEY NOT NULL,
nombreClientE NVARCHAR2(50) NOT NULL,
contactoCliente NUMBER NOT NULL
);

CREATE TABLE PEDIDOS( 
idPedido NUMBER PRIMARY KEY NOT NULL,
id_Cliente NUMBER NOT NULL,
facturaPedido NUMBER NOT NULL,
FOREIGN KEY(id_Cliente) REFERENCES CLIENTES(idCliente)
);

INSERT INTO CLIENTES VALUES(1, 'Marco Lambert', 456443552);
INSERT INTO CLIENTES VALUES(2, 'Lydia Roderic', 445332221);
INSERT INTO CLIENTES VALUES(3, 'Ebbe Therese', 488982635);
INSERT INTO CLIENTES VALUES(4, 'Sofie Mariona', 412436773);
COMMIT;

INSERT INTO PEDIDOS VALUES(234, 4, 160);
INSERT INTO PEDIDOS VALUES(235, 2, 48);
INSERT INTO PEDIDOS VALUES(236, 3, 64);
INSERT INTO PEDIDOS VALUES(237, 4, 92);
COMMIT;

SELECT * FROM CLIENTES;
SELECT * FROM PEDIDOS;

------ MOSTRAR TODOS LOS CLIENTE CON PEDIDOR Y ODERNALS POR NOMBRE

SELECT CLIENTES.nombreCliente, PEDIDOS.idPedido
FROM CLIENTES 
INNER JOIN PEDIDOS 
ON  clientes.idcliente = pedidos.id_cliente 
ORDER BY clientes.nombrecliente;

------ MOSTRAR TODOS LOS CLIENTES Y CUALQUIER PEDIDO

SELECT CLIENTES.nombreCliente, PEDIDOS.idPedido
FROM CLIENTES 
LEFT JOIN PEDIDOS 
ON  clientes.idcliente = pedidos.id_cliente
ORDER BY clientes.nombrecliente;

------ MOSTRAR TODOS LOS PEDIDOS Y SU CLIENTE

SELECT PEDIDOS.idPedido, CLIENTES.nombreCliente
FROM CLIENTES 
RIGHT JOIN PEDIDOS 
ON  clientes.idcliente = pedidos.id_cliente
ORDER BY clientes.nombrecliente;

------ MOSTRAR TODOS LOS PEDIDOS Y SU CLIENTE

SELECT *
FROM CLIENTES 
FULL JOIN PEDIDOS 
ON  clientes.idcliente = pedidos.id_cliente
ORDER BY clientes.nombrecliente;

------------------------------------------- EJERCICIOS

CREATE TABLE PAIS(
ID NUMBER PRIMARY KEY NOT NULL,
NOMBRE NVARCHAR2(50) NOT NULL,
POBLACION NUMBER NOT NULL,
EXTE_TERRITORIAL NUMBER NOT NULL,
NUM_IDIOMAS NUMBER NOT NULL
);

CREATE TABLE ESTADOS(
ID NUMBER PRIMARY KEY NOT NULL,
NOMBRE NVARCHAR2(50) NOT NULL,
NUMERO_HAB NUMBER,
EXTENSION_TERR NUMBER,
ID_PAIS NUMBER NOT NULL,
FOREIGN KEY(ID_PAIS) REFERENCES PAIS(ID)
);

DROP TABLE ESTADOS;

SELECT * FROM PAIS;
SELECT * FROM ESTADOS;

INSERT INTO PAIS VALUES(1,'MEXICO',126000000,1973000000000,4);
INSERT INTO PAIS VALUES(2,'USA',266000000,4973000000000,6);
INSERT INTO PAIS VALUES(3,'RUSIA',25000000,73000000000,4);
INSERT INTO PAIS VALUES(4,'FRANCIA',45000000,3000000000,3);
INSERT INTO PAIS VALUES(5,'CHINA',28000000,773000000000,7);
COMMIT;

INSERT INTO ESTADOS VALUES(1, 'PUEBLA', 6583278, 34251, 1);
INSERT INTO ESTADOS VALUES(2, 'ZACATECAS', 1622000, 75275, 1);
INSERT INTO ESTADOS VALUES(3, 'CHIHUAHUA', 878062, 247455, 1);
INSERT INTO ESTADOS VALUES(4, 'CDMX', 885500, 1495, 1);
INSERT INTO ESTADOS VALUES(5, 'CAMPECHE', 689656, 57484, 1);

INSERT INTO ESTADOS VALUES(6, 'CALIFORNIA', 39240000, 423970, 2);
INSERT INTO ESTADOS VALUES(7, 'LA TONTA TEXAS', 29530000, 695662, 2);
INSERT INTO ESTADOS VALUES(8, 'FLORIDA', 21780000, 170312, 2);
INSERT INTO ESTADOS VALUES(9, 'MISSOURI', 6168000, 180560, 2);
INSERT INTO ESTADOS VALUES(10, 'CALIFORNIA', 1964000, 200330, 2);

INSERT INTO ESTADOS VALUES (11, 'MOSCU', 1198000000, 2511, 3);
INSERT INTO ESTADOS VALUES (12, 'EKATERIMBURGO', 	1501000, 490, 3);
INSERT INTO ESTADOS VALUES (13, 'SAN PETERSBURGO', 5000000, 1439, 3);
INSERT INTO ESTADOS VALUES (14, 'VOLGOGRADO', 1004763, 8594, 3);
INSERT INTO ESTADOS VALUES (15, 'KAZAN', 1243500, 9000, 3);

INSERT INTO ESTADOS VALUES (16, 'GRAN ESTE', 5556219, 57433, 4);
INSERT INTO ESTADOS VALUES (17, 'BRETAÑA', 3354854, 27208, 4);
INSERT INTO ESTADOS VALUES (18, 'ALTA FRANCIA', 6004973, 31813 ,4);
INSERT INTO ESTADOS VALUES (19, 'NORMANDIA', 3315000, 29906 , 4);
INSERT INTO ESTADOS VALUES (20, 'ISLA DE FRANCIA', 12262544, 12011 , 4);

INSERT INTO ESTADOS VALUES(21, 'JIANGSU', 200000, 100000, 5);
INSERT INTO ESTADOS VALUES(22, 'SHANGAI', 300000, 150000, 5);
INSERT INTO ESTADOS VALUES(23, 'SHANXI', 152000, 159000, 5);
INSERT INTO ESTADOS VALUES(24, 'YUNNAN', 600000, 80000, 5);
INSERT INTO ESTADOS VALUES(25, 'ZHEJIANG', 120000, 80989, 5);

COMMIT;

-- EJERCICIOS
--MOSTRAR LA INFORMACION DE LAS 2 TABLAS

SELECT *
FROM PAIS 
FULL JOIN ESTADOS 
ON  pais.id = estados.id;


-- CONTAR CUANTOS ESTADOS TIENE CADA PAIS 
SELECT pais.nombre, (SELECT COUNT(*) FROM ESTADOS WHERE pais.id = estados.id_pais) AS NUM_ESTADOS FROM PAIS;

-- NOMBRE DE LOS ESTADOS DE MEXICO Y ORDENARLOS DE ACUERDO A SU HABITANTES
SELECT NOMBRE, NUMERO_HAB FROM ESTADOS WHERE ID_PAIS=1 ORDER BY NUMERO_HAB DESC;

-- MOSTRAR LOS  ESTADOS DE PAIS FRANCIA Y ORDENARLOS POR NOMBRE
SELECT NOMBRE FROM ESTADOS WHERE ID_PAIS=4 ORDER BY NOMBRE ;

-- CONTAR CUANTOS ESTADOS TENGO DEL PAIS DE ESTADOS UNIDOS
SELECT  COUNT(*) AS USA FROM ESTADOS WHERE ID_PAIS = 2;

-- SUMAR EL NUMERO DE HABITANTES DE TODOS LOS PAISES
SELECT SUM(POBLACION) AS TOTAL_HABITANTES FROM PAIS;

-- SUMA EL NUMERO DE HABITANTES DE TODOS LOS ESTADOS QUE PERTENECEN A CHINA
SELECT SUM(NUMERO_HAB)
FROM PAIS 
FULL JOIN ESTADOS 
ON  pais.id = estados.id_pais
WHERE pais.nombre = 'CHINA';

-- BUSCAR EL PAIS CON MAYOR NUMERO DE HABITANTES
SELECT * FROM PAIS WHERE POBLACION = (SELECT MAX(POBLACION) FROM PAIS);

-- BUSCAR EL PAIS CON MENOR NUMERO DE HABITANTES
SELECT * FROM PAIS WHERE POBLACION = (SELECT MIN(POBLACION) FROM PAIS);

-- SACAR EL PROMEDIO DE HABITANTES POR PAISES
SELECT pais.nombre, (SELECT AVG(NUMERO_HAB) FROM ESTADOS WHERE pais.id = estados.id_pais) AS PROMEDIO_HABITANTES FROM PAIS;

-- CONSULTA DONDE PUEDA MOSTRAR LOS CASES
SELECT NOMBRE, POBLACION,
(CASE 
WHEN NUM_IDIOMAS BETWEEN 0 AND 3 THEN 'IDIOMAS VECINOS'
WHEN NUM_IDIOMAS BETWEEN 4 AND 6 THEN 'IDIOMAS CONTINENTAL'
WHEN NUM_IDIOMAS > 6 THEN 'IDIOMAS MUNDIALES'
END
) AS IDIOMAS_HABLADOS
FROM PAIS;

-------- CARDINALIDAD MUCHOS A MUCHOS
CREATE TABLE CURSOS_ENUC(
ID NUMBER PRIMARY KEY NOT NULL,
NOMBRE NVARCHAR2(50) NOT NULL,
HORA_INICIO DATE NOT NULL,
HORA_FINAL DATE NOT NULL
);

DROP TABLE CURSOS_ENUC;
DROP TABLE CUR_ALUM;

CREATE TABLE ALUMNO_ENUC(
ID NUMBER PRIMARY KEY NOT NULL,
NOMBRE NVARCHAR2(50) NOT NULL,
APP NVARCHAR2(50) NOT NULL,
APM NVARCHAR2(50) NOT NULL,
NUM_CELULAR NUMBER,
CORREO NVARCHAR2(50) 
);

CREATE TABLE CUR_ALUM(
ID NUMBER PRIMARY KEY NOT NULL,
ID_CURSO NUMBER NOT NULL,
ID_ALUMNO NUMBER NOT NULL,
FOREIGN KEY(ID_CURSO) REFERENCES CURSOS_ENUC(ID),
FOREIGN KEY(ID_ALUMNO) REFERENCES ALUMNO_ENUC(ID)
);
DROP TABLE CUR_ALUM;
----------------------------------------------------------------------------------------------------------------------------

SELECT TO_CHAR(HORA_INICIO, 'hh24:mi:ss') AS HORA_I FROM CURSOS_ENUC;

---- AGREGAR REGISTRO DE LAS 3 TABLAS
INSERT INTO CURSOS_ENUC VALUES(1, 'FISICA', TO_DATE('23/05/2023 10:00:00', 'dd/mm/yyyy hh24:mi:ss'), TO_DATE('23/05/2023 10:50:00', 'dd/mm/yyyy hh24:mi:ss'));
INSERT INTO CURSOS_ENUC VALUES(2, 'DINAMICA', TO_DATE('23/05/2023 12:00:00', 'dd/mm/yyyy hh24:mi:ss'), TO_DATE('23/05/2023 13:30:00', 'dd/mm/yyyy hh24:mi:ss'));
INSERT INTO CURSOS_ENUC VALUES(3, 'FEOMETRIA', TO_DATE('23/05/2023 08:00:00', 'dd/mm/yyyy hh24:mi:ss'), TO_DATE('23/05/2023 09:15:00', 'dd/mm/yyyy hh24:mi:ss'));
COMMIT;

INSERT INTO ALUMNO_ENUC VALUES(1, 'JUAN', 'FUENTES', 'PEREZ', 2205698745, 'juan@gmail.com');
INSERT INTO ALUMNO_ENUC VALUES(2, 'ANTONIO', 'LOPEZ', 'MARTINEZ', 55699331236, 'antonio@gmail.com');
INSERT INTO ALUMNO_ENUC VALUES(3, 'SIMONA', 'JUAREZ', 'GUZMAN', 4425698325, 'simona@gmail.com');
COMMIT;

INSERT INTO CUR_ALUM VALUES(1, 2, 3);
INSERT INTO CUR_ALUM VALUES(2, 3, 1);
INSERT INTO CUR_ALUM VALUES(3, 1, 2);
COMMIT;


---- MOSTRAR LA INFORMACION DE LAS 3 TABLAS

SELECT *
FROM CUR_ALUM ca
INNER JOIN ALUMNO_ENUC a
ON ca.id_alumno = a.id
INNER JOIN CURSOS_ENUC c
ON ca.id_curso = c.id;

-------------------------------------------------- EJERCICIO DOCUMENTO ------------------------------------------------------

CREATE TABLE PACIENTE(
ID NUMBER PRIMARY KEY NOT NULL,
NOMBRE NVARCHAR2(50) NOT NULL,
APE NVARCHAR2(50) NOT NULL,
EDAD NUMBER NOT NULL
);
INSERT INTO PACIENTE VALUES(1, 'ADRIAN', 'PEREZ', 32);
INSERT INTO PACIENTE VALUES(2, 'MARIANA', 'LOPEZ', 23);
INSERT INTO PACIENTE VALUES(3, 'PEDRO', 'JUAREZ', 44);
INSERT INTO PACIENTE VALUES(4, 'SOFIA', 'MORALES', 38);
INSERT INTO PACIENTE VALUES(5, 'FANY', 'MEDINA', 27);
COMMIT;
SELECT * FROM PACIENTE;

CREATE TABLE DOCTOR(
ID NUMBER PRIMARY KEY NOT NULL,
NOMBRE NVARCHAR2(50) NOT NULL,
ESPECIALIDAD NVARCHAR2(50) NOT NULL
);
INSERT INTO DOCTOR VALUES(1, 'RODRIGO', 'NEUROLOGO');
INSERT INTO DOCTOR VALUES(2, 'MARIA', 'CIRUJANO');
INSERT INTO DOCTOR VALUES(3, 'JESUS', 'CARDIOLOGO');
COMMIT;
SELECT * FROM DOCTOR;

CREATE TABLE CONSULTORIO(
ID NUMBER PRIMARY KEY NOT NULL,
PISO NUMBER NOT NULL,
AREA NVARCHAR2(50) NOT NULL,
ID_DOCTOR NUMBER NOT NULL,
FOREIGN KEY(ID_DOCTOR) REFERENCES DOCTOR(ID) 
);
INSERT INTO CONSULTORIO VALUES(1, 2, 'GENERAL', 1);
INSERT INTO CONSULTORIO VALUES(2, 3, 'EMERGENCIAS', 2);
INSERT INTO CONSULTORIO VALUES(3, 2, 'GENERAL', 3);
COMMIT;
SELECT * FROM CONSULTORIO;

CREATE TABLE CITAS(
ID NUMBER PRIMARY KEY NOT NULL,
FECHA DATE NOT NULL,
ID_PACIENTE NUMBER NOT NULL,
HORA_INICIO NVARCHAR2(50) NOT NULL,
HORA_FIN NVARCHAR2(50) NOT NULL,
ID_DOCTOR NUMBER NOT NULL,
FOREIGN KEY(ID_PACIENTE) REFERENCES PACIENTE(ID),
FOREIGN KEY(ID_DOCTOR) REFERENCES DOCTOR(ID)
);
DELETE FROM CITAS;
INSERT INTO CITAS VALUES(1, '22/02/23', 1, '12:00', '13:00', 1);
INSERT INTO CITAS VALUES(2, '22/02/23', 2, '14:00', '14:50', 2);
INSERT INTO CITAS VALUES(3, '22/02/23', 3, '09:00', '10:00', 2);
INSERT INTO CITAS VALUES(4, '23/02/23', 4, '10:00', '10:40', 3);
INSERT INTO CITAS VALUES(5, '23/02/23', 5, '14:00', '14:30', 1);
INSERT INTO CITAS VALUES(6, '24/02/23', 3, '10:00', '10:50', 2);
COMMIT;
SELECT * FROM CITAS;

-- 1.	Consulta que obtenga el Nombre de paciente, Id de cita, Fecha de cita, Hora de inicio de cita, Nombre doctor, Id de consultorio ordenado por Paciente
SELECT paciente.nombre, citas.id, citas.fecha, citas.hora_inicio, doctor.nombre, consultorio.id
FROM CITAS
INNER JOIN PACIENTE 
ON citas.id_paciente = paciente.id
INNER JOIN DOCTOR
ON citas.id_doctor = doctor.id
INNER JOIN CONSULTORIO
ON consultorio.id_doctor = doctor.id
ORDER BY paciente.nombre ;

-- 2.	Consulta que obtenga el Total de citas por Doctor, Nombre doctor, Id Consultorio, Piso y Área por Fecha
SELECT doctor.nombre, COUNT(citas.id) AS TOTAL_CONSULTAS, consultorio.id, consultorio.piso, consultorio.area, citas.fecha
FROM CITAS
INNER JOIN PACIENTE 
ON citas.id_paciente = paciente.id
INNER JOIN DOCTOR
ON citas.id_doctor = doctor.id
INNER JOIN CONSULTORIO
ON consultorio.id_doctor = doctor.id
GROUP BY doctor.nombre, consultorio.id, consultorio.piso, consultorio.area, citas.fecha 
ORDER BY citas.fecha ;

-- 3.	Consulta que obtenga la Total de citas por Área ordenando de menor a mayor
SELECT consultorio.area, COUNT(citas.id) AS  TOTAL_CONSULTAS
FROM CITAS
INNER JOIN PACIENTE 
ON citas.id_paciente = paciente.id
INNER JOIN DOCTOR
ON citas.id_doctor = doctor.id
INNER JOIN CONSULTORIO
ON consultorio.id_doctor = doctor.id
GROUP BY consultorio.area
ORDER BY TOTAL_CONSULTAS;

--------------------------------------- TRIGGER --- DISPARADOR DE EVENTOS -- OPERACIONES(INSERT, UPDATE Y DELETE)

CREATE TABLE BEBIDAS(
ID NUMBER PRIMARY KEY NOT NULL,
NOMBRE NVARCHAR2(50) NOT NULL,
TIPO_BEBIDA NVARCHAR2(50),
CADUCIDAD DATE
);

INSERT INTO BEBIDAS VALUES(1, 'COCA', 'CLASICO', '24/06/23');
INSERT INTO BEBIDAS VALUES(2, 'COCA', 'CLASICO', '24/06/23');
INSERT INTO BEBIDAS VALUES(3, 'COCA', 'CLASICO', '24/06/23');
COMMIT;

UPDATE BEBIDAS SET NOMBRE='FANTA' WHERE ID=1;
COMMIT;

DELETE FROM BEBIDAS WHERE ID=1;
COMMIT;

SELECT * FROM BEBIDAS;

SELECT * FROM CONTROL_OP;

CREATE TABLE  CONTROL_OP(
USUARIO NVARCHAR2(50),
FECHA DATE
);


----------------- REALIZAR UN TRIGGER CON UN EJEMPLO QUE GUSTEN

CREATE TABLE ENFERMO(
ID NUMBER PRIMARY KEY NOT NULL,
NOMBRE NVARCHAR2(50) NOT NULL,
EDAD NUMBER NOT NULL,
DOCTOR NVARCHAR2(50) NOT NULL,
DIAGNOSTICO NVARCHAR2(50) NOT NULL
);

INSERT INTO ENFERMO VALUES(1, 'JUAN', 22, 'PEDRO', 'GRIPE');
COMMIT;

SELECT * FROM DOC; 

CREATE TABLE DOC(
NOMBRE NVARCHAR2(50) NOT NULL,
DIAGNOSTICO NVARCHAR2(50) NOT NULL
);
  
----------------- SECUENCIAS -- ME PERMITE GENERAR LOS AUTOICREMENTABLES

CREATE TABLE CARRO(
ID NUMBER PRIMARY KEY NOT NULL,
COLOR NVARCHAR2(50) NOT NULL,
PLACA NVARCHAR2(50) NOT NULL,
ANIO NUMBER NOT NULL
);
INSERT INTO CARRO(COLOR, PLACA, ANIO) VALUES('ROJO', 'KD588', 2000);
INSERT INTO CARRO(COLOR, PLACA, ANIO) VALUES('ROJO', 'KD588', 2000);
INSERT INTO CARRO(COLOR, PLACA, ANIO) VALUES('ROJO', 'KD588', 2000);
COMMIT;

SELECT * FROM CARRO;

-- CREAR LA SECUENCIA
CREATE SEQUENCE SEC_CARR
START WITH 1
INCREMENT BY 1;

-- GENERAR EL TRIGGER
CREATE TRIGGER TRIGGER_SECARR
BEFORE INSERT
ON CARRO
FOR EACH ROW
BEGIN
    SELECT SEC_CARR.NEXTVAL INTO :NEW.ID FROM DUAL;
END;

--NEXTVAL - SE UTILIZA PARA RECUPERAR EL VALOR DE LA SECUENCIA
--DUAL - ES UNA TABLA CON UN SOLO REGISTRO EN ORACLE

---- REALIZAR LA BASE DE DATOS QUE TIENEN EN ESTE GESTOR
-- NORMALIZADO
-- SECUENCIA
-- TIGGER
 ----------TABLA TIENDA
CREATE TABLE TIENDA(
ID NUMBER PRIMARY KEY NOT NULL,
NOMBRE NVARCHAR2(50)
);

INSERT INTO TIENDA(NOMBRE) VALUES('CHEDRAUI');
INSERT INTO TIENDA(NOMBRE) VALUES('WALMART');
COMMIT;
SELECT * FROM TIENDA;

CREATE SEQUENCE SECTIENDA
START WITH 1
INCREMENT BY 1;
CREATE TRIGGER TRITIENDA
    BEFORE INSERT
    ON TIENDA
    FOR EACH ROW
    BEGIN
        SELECT SECTIENDA.NEXTVAL INTO :NEW.ID FROM DUAL;
    END;

---------- TABLA SUCURSAL
CREATE TABLE SUCURSAL(
ID NUMBER PRIMARY KEY NOT NULL,
ID_TIENDA NUMBER NOT NULL,
NOMBRE NVARCHAR2(50),
ID_UBICACION NUMBER NOT NULL,
FOREIGN KEY(ID_TIENDA) REFERENCES TIENDA(ID),
FOREIGN KEY(ID_UBICACION) REFERENCES UBICACION(ID) 
);
INSERT INTO SUCURSAL(ID_TIENDA, NOMBRE, ID_UBICACION) VALUES(1, 'CHEDRAUI LA PAZ', 1);
INSERT INTO SUCURSAL(ID_TIENDA, NOMBRE, ID_UBICACION) VALUES(2, 'WALMART SAN MARTIN', 2);
COMMIT;
SELECT * FROM SUCURSAL;

CREATE SEQUENCE SECSUCURSAL
START WITH 1
INCREMENT BY 1;
CREATE TRIGGER TRISUCURSAL
    BEFORE INSERT
    ON SUCURSAL
    FOR EACH ROW
    BEGIN
        SELECT SECSUCURSAL.NEXTVAL INTO :NEW.ID FROM DUAL;
    END;

---------- TABLA UBICACION
CREATE TABLE UBICACION(
ID NUMBER PRIMARY KEY NOT NULL,
ID_DOMICILIO NUMBER NOT NULL,
TEL NUMBER NOT NULL,
FOREIGN KEY(ID_DOMICILIO) REFERENCES DOMICILIO(CP)
);
INSERT INTO UBICACION(ID_DOMICILIO, TEL) VALUES(72160, 2225893674);
INSERT INTO UBICACION(ID_DOMICILIO, TEL) VALUES(74000, 2481235220);
COMMIT;
SELECT * FROM UBICACION;

CREATE SEQUENCE SECUBICACION
START WITH 1
INCREMENT BY 1;
CREATE TRIGGER TRIUBICACION
    BEFORE INSERT
    ON UBICACION
    FOR EACH ROW
    BEGIN
        SELECT SECUBICACION.NEXTVAL INTO :NEW.ID FROM DUAL;
    END;

---------- TABLA DOMICILIO
CREATE TABLE DOMICILIO(
CP NUMBER PRIMARY KEY NOT NULL,
CIUDAD NVARCHAR2(50) NOT NULL,
COLONIA NVARCHAR2(50) NOT NULL
);
INSERT INTO DOMICILIO VALUES(72160, 'PUEBLA', 'LA PAZ');
INSERT INTO DOMICILIO VALUES(72266, 'PUEBLA', 'LOS FUERTES');
INSERT INTO DOMICILIO VALUES(74000, 'SAN MARTIN', 'OJO DE AGUA');
INSERT INTO DOMICILIO VALUES(74135, 'SAN LUCAS', 'LA COLONIA');
COMMIT;
SELECT * FROM DOMICILIO;

---------- TABLA SALARIOS -- CAMBIAR A PUESTOS
CREATE TABLE SALARIOS(
ID NUMBER PRIMARY KEY NOT NULL,
PUESTO NVARCHAR2(50) NOT NULL,
SALARIO NUMBER NOT NULL,
PRESTACION NVARCHAR2(50) NOT NULL
);
INSERT INTO SALARIOS(PUESTO, SALARIO, PRESTACION) VALUES('CAJA', 8000, 'TODAS LAS PRESTACIONES');
INSERT INTO SALARIOS(PUESTO, SALARIO, PRESTACION) VALUES('MOSTRADOR', 9000, 'TODAS LAS PRESTACIONES');
INSERT INTO SALARIOS(PUESTO, SALARIO, PRESTACION) VALUES('VENDEDOR', 1000, 'TODAS LAS PRESTACIONES');
COMMIT
SELECT * FROM SALARIOS;

CREATE SEQUENCE SECSALARIO
START WITH 1
INCREMENT BY 1;
CREATE TRIGGER TRISALARIO
    BEFORE INSERT
    ON SALARIOS
    FOR EACH ROW
    BEGIN
        SELECT SECSALARIO.NEXTVAL INTO :NEW.ID FROM DUAL;
    END;

---------- TABLA EMPLEADOS
CREATE TABLE EMPLEADOS(
ID NUMBER PRIMARY KEY NOT NULL,
ID_SUCURSAL NUMBER NOT NULL,
ID_DOMICILIO NUMBER NOT NULL,
ID_SALARIO NUMBER NOT NULL,
NOMBRE NVARCHAR2(50) NOT NULL,
TEL NUMBER NOT NULL,
NSS NUMBER NOT NULL,
CLABE NUMBER NOT NULL,
FOREIGN KEY(ID_SUCURSAL) REFERENCES SUCURSAL(ID),
FOREIGN KEY(ID_DOMICILIO) REFERENCES DOMICILIO(CP),
FOREIGN KEY(ID_SALARIO) REFERENCES SALARIOS(ID)
);
INSERT INTO EMPLEADOS(ID_SUCURSAL, ID_DOMICILIO, ID_SALARIO, NOMBRE, TEL, NSS, CLABE) VALUES(1, 72266, 1, 'ALFREDO', 2205698471, 2569834, 7896541569);
COMMIT;
SELECT * FROM EMPLEADOS;

CREATE SEQUENCE SECEMPLEADOS
START WITH 1
INCREMENT BY 1;
CREATE TRIGGER TRIEMPLEADOS
    BEFORE INSERT
    ON EMPLEADOS
    FOR EACH ROW
    BEGIN
        SELECT SECEMPLEADOS.NEXTVAL INTO :NEW.ID FROM DUAL;
    END;

---------- TABLA PROVEEDORES -- ANEXAR TABLA DE PRODUCTO
CREATE TABLE PROVEEDOR(
ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(50) NOT NULL,
PRODUCTO NVARCHAR2(50) NOT NULL,
PRECIOU NUMBER NOT NULL,
CANTIDAD NUMBER NOT NULL
);
INSERT INTO PROVEEDOR(NOMBRE, PRODUCTO, PRECIOU, CANTIDAD) VALUES('PANADERIA', 'CONCHA', 12, 3);
COMMIT;
SELECT * FROM PROVEEDOR;

CREATE SEQUENCE SECPROVEEDOR
START WITH 1
INCREMENT BY 1;
CREATE TRIGGER TRIPROVEEDOR
    BEFORE INSERT
    ON PROVEEDOR
    FOR EACH ROW
    BEGIN
        SELECT SECPROVEEDOR.NEXTVAL INTO :NEW.ID FROM DUAL;
    END;


---------- TABLA ALMACEN
CREATE TABLE INVENTARIO_ALMACEN(
ID NUMBER PRIMARY KEY NOT NULL,
NOMBRE_ALMACEN NVARCHAR2(50) NOT NULL,
ID_PROVEEDOR NUMBER NOT NULL,
EXISTENCIA NUMBER NOT NULL,
BAJAS NUMBER NOT NULL,
DEVOLUCIONES NUMBER NOT NULL,
FOREIGN KEY(ID_PROVEEDOR) REFERENCES PROVEEDOR(ID)
);
INSERT INTO INVENTARIO_ALMACEN(NOMBRE_ALMACEN, ID_PROVEEDOR, EXISTENCIA, BAJAS, DEVOLUCIONES) VALUES('COCINA PANADERIA', 1, 5, 0, 0);
COMMIT;
SELECT * FROM INVENTARIO_ALMACEN;

CREATE SEQUENCE SECALMACEN
START WITH 1
INCREMENT BY 1;
CREATE TRIGGER TRIALMACEN
    BEFORE INSERT
    ON INVENTARIO_ALMACEN
    FOR EACH ROW
    BEGIN
        SELECT SECALMACEN.NEXTVAL INTO :NEW.ID FROM DUAL;
    END;
    
---------- TABLA INVENTARIO EN DEPARTAMENTO
CREATE TABLE INVENTARIO_DEPARTAMENTO(
ID NUMBER PRIMARY KEY NOT NULL,
ID_PROVEEDOR NUMBER NOT NULL,
PRODUCTO_MOSTRADOR NUMBER NOT NULL,
PRECIO_MOSTRADOR NUMBER NOT NULL,
FOREIGN KEY(ID_PROVEEDOR) REFERENCES PROVEEDOR(ID)
);
INSERT INTO INVENTARIO_DEPARTAMENTO(ID_PROVEEDOR, PRODUCTO_MOSTRADOR, PRECIO_MOSTRADOR) VALUES(1, 4, 18);
COMMIT;
SELECT * FROM INVENTARIO_DEPARTAMENTO;

CREATE SEQUENCE SECINVDEPARTAMENTO
START WITH 1
INCREMENT BY 1;
CREATE TRIGGER TRI_INVDEP
    BEFORE INSERT
    ON INVENTARIO_DEPARTAMENTO
    FOR EACH ROW
    BEGIN
        SELECT SECINVDEPARTAMENTO.NEXTVAL INTO :NEW.ID FROM DUAL;
    END;

---------- TABLA DE DEPARTAMENTOS
CREATE TABLE DEPARTAMENTOS(
ID NUMBER PRIMARY KEY NOT NULL,
ID_INVDEP NUMBER NOT NULL,
ID_INVALM NUMBER NOT NULL,
ID_SUCURSAL NUMBER NOT NULL,
NOMBRE NVARCHAR2(50) NOT NULL,
ENCARGADO NVARCHAR2(50) NOT NULL,
FOREIGN KEY(ID_INVDEP) REFERENCES INVENTARIO_DEPARTAMENTO(ID),
FOREIGN KEY(ID_INVALM) REFERENCES INVENTARIO_ALMACEN(ID),
FOREIGN KEY(ID_SUCURSAL) REFERENCES SUCURSAL(ID)
);
INSERT INTO DEPARTAMENTOS(ID_INVDEP, ID_INVALM, ID_SUCURSAL, NOMBRE, ENCARGADO) VALUES(1, 1, 1, 'PANADERIA CHEDRAUI', 'ALFONSO');
COMMIT;
SELECT * FROM DEPARTAMENTOS;

CREATE SEQUENCE SECDEPARTAMENTOS
START WITH 1
INCREMENT BY 1;
CREATE TRIGGER TRIDEPARTAMENTOS
    BEFORE INSERT
    ON DEPARTAMENTOS
    FOR EACH ROW
    BEGIN
        SELECT SECDEPARTAMENTOS.NEXTVAL INTO :NEW.ID FROM DUAL;
    END;

---------- TABLA DE VENTAS
CREATE TABLE VENTAS(
ID NUMBER PRIMARY KEY,
ID_DEPARTAMENTO NUMBER NOT NULL,
TOTAL_PROVEN NUMBER NOT NULL,
TOTAL_INGRED NUMBER NOT NULL,
FOREIGN KEY(ID_DEPARTAMENTO) REFERENCES DEPARTAMENTOS(ID)
);
INSERT INTO VENTAS(ID_DEPARTAMENTO, TOTAL_PROVEN, TOTAL_INGRED) VALUES(1, 4, 72);
COMMIT;
SELECT * FROM VENTAS;

CREATE SEQUENCE SECVENTAS
START WITH 1
INCREMENT BY 1;
CREATE TRIGGER TRIVENTAS
    BEFORE INSERT
    ON VENTAS
    FOR EACH ROW
    BEGIN
        SELECT SECVENTAS.NEXTVAL INTO :NEW.ID FROM DUAL;
    END;


-- ARCHIVO SQL