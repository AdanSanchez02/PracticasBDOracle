CREATE TABLE DEPARTAMENTOSMTI(
Deptno NUMBER PRIMARY KEY NOT NULL,
Dname NVARCHAR2(50) NOT NULL,
Loc NVARCHAR2(50) NOT NULL
);

INSERT INTO DEPARTAMENTOSMTI VALUES(10, 'CONTABILIDAD', 'NEW YORK');
INSERT INTO DEPARTAMENTOSMTI VALUES(20, 'INVESTIGACION', 'DALLAS');
INSERT INTO DEPARTAMENTOSMTI VALUES(30, 'VENTAS', 'CHICAGO');
INSERT INTO DEPARTAMENTOSMTI VALUES(40, 'OPERACION', 'BOSTON');
COMMIT;

CREATE TABLE EMPLEADOSMTI(
Empno NUMBER PRIMARY KEY NOT NULL,
Ename NVARCHAR2(50) NOT NULL,
Puesto NVARCHAR2(50)NOT NULL,
ID_Depto NUMBER NOT NULL,
Sal NUMBER NOT NULL,
Comm NUMBER NULL,
Mgr NUMBER NULL,
FOREIGN KEY(ID_Depto) REFERENCES DEPARTAMENTOSMTI(Deptno)
);


INSERT INTO EMPLEADOSMTI VALUES(7839, 'JUAN', 'VENDEDOR', 30, 2850, NULL, 7566);
INSERT INTO EMPLEADOSMTI VALUES(7698, 'MARIA', 'SENIOR', 30, 2450, NULL, 7566);
INSERT INTO EMPLEADOSMTI VALUES(7782, 'JOSE', 'SENIOR', 30, 2975, NULL, 7566);
INSERT INTO EMPLEADOSMTI VALUES(7566, 'MIGUEL', 'PRESIDENTE', 30, 11250, NULL, NULL);
INSERT INTO EMPLEADOSMTI VALUES(7654, 'SEBASTIAN', 'ANALISTA', 20, 3000, 1400, 7566);
INSERT INTO EMPLEADOSMTI VALUES(7499, 'EMILIO', 'ANALISTA', 20, 3000, 300, 7698);
INSERT INTO EMPLEADOSMTI VALUES(7844, 'ROBERTA', 'ANALISTA', 20, 3000, NULL, 7782);
INSERT INTO EMPLEADOSMTI VALUES(7900, 'ARNOLD', 'MOSTRADOR', 30, 1500, NULL, 7782);
INSERT INTO EMPLEADOSMTI VALUES(7521, 'MRIAM', 'MOSTRADOR', 30, 1500, 500, 7698);
INSERT INTO EMPLEADOSMTI VALUES(7902, 'MARCO', 'MOSTRADOR', 30, 1500, NULL, 7782);
INSERT INTO EMPLEADOSMTI VALUES(7369, 'PEDRO', 'ANALISTA', 20, 3000, NULL, 7698);
INSERT INTO EMPLEADOSMTI VALUES(7788, 'SOFIA', 'ANALISTA', 20, 3000, NULL, 7698);
INSERT INTO EMPLEADOSMTI VALUES(7876, 'ALEJANDRA', 'VENDEDOR', 30, 1600, NULL, 7782);
INSERT INTO EMPLEADOSMTI VALUES(7934, 'ANA MARIA', 'VENDEDOR', 30, 1300, NULL, 7566);
COMMIT;

Select Ename,Puesto,Sal SALARY From EMPLEADOSMTI; -- 1

Select   empno,ename,sal*12  AS AnnualSalary From EMPLEADOSMTI; 

Select Ename, ID_Depto From EMPLEADOSMTI WHERE Empno=7654; 

SELECT empleadosmti.ename, departamentosmti.dname, empleadosmti.sal, empleadosmti.comm 
FROM DEPARTAMENTOSMTI
INNER JOIN EMPLEADOSMTI 
ON empleadosmti.id_depto= departamentosmti.deptno
WHERE empleadosmti.sal IN(SELECT DISTINCT empleadosmti.sal FROM EMPLEADOSMTI WHERE empleadosmti.id_depto=20) AND empleadosmti.id_depto=20;

SELECT  COUNT(*) AS TOTAL_DEPARTAMENTOS FROM DEPARTAMENTOSMTI;

----------------- ALTER
CREATE TABLE DOMICILIO1(
ID NUMBER PRIMARY KEY NOT NULL,
CP NUMBER NOT NULL
);
DROP TABLE DOMICILIO1;

ALTER TABLE DOMICILIO1
ADD CALLE NVARCHAR2(50);

ALTER TABLE DOMICILIO1
ADD (NUM_EXT NUMBER, NUM_INT NUMBER);

ALTER TABLE DOMICILIO1
DROP COLUMN NUM_INT;

ALTER TABLE DOMICILIO1
DROP(NUM_EXT, CALLE);


--- ALTER RESTRICCIONES

ALTER TABLE DOMICILIO1
ADD CONSTRAINT CK_NUMEXT 
CHECK(NUM_EXT>0 AND NUM_EXT<10000);


INSERT INTO DOMICILIO1 VALUES(1, 74000, 100, NULL);

SELECT * FROM DOMICILIO1;

---- EJERCICIO

CREATE TABLE CEMITA(
ID NUMBER PRIMARY KEY,
CARNE NVARCHAR2(50),
QUESO NVARCHAR2(50)
);

CREATE TABLE PICANTE(
ID NUMBER PRIMARY KEY NOT NULL,
TIPO NVARCHAR2(50) NOT NULL
);

ALTER TABLE CEMITA
ADD (CHILE NUMBER NOT NULL, FOREIGN KEY(CHILE) REFERENCES PICANTE(ID));

ALTER TABLE CEMITA
ADD (PAPALO NVARCHAR2(50) DEFAULT 'NO', REFRESCO NVARCHAR2(50) DEFAULT 'NO');

INSERT INTO PICANTE VALUES(1, 'CHIPOTLE');
INSERT INTO PICANTE VALUES(2, 'RAJAS');
INSERT INTO PICANTE VALUES(3, 'HABANERO');
COMMIT;
SELECT * FROM  PICANTE;

INSERT INTO CEMITA VALUES(1, 'MILANESA POLLO', 'QUESILLO', 2, DEFAULT);
COMMIT;

ALTER TABLE CEMITA
ADD PRECIO NUMBER;

ALTER TABLE CEMITA
ADD CONSTRAINT CK_PRECIO 
CHECK(PRECIO>0 AND PRECIO<50);

ALTER TABLE CEMITA
MODIFY QUESO DEFAULT 'QUESO REDONDO';

UPDATE CEMITA SET PRECIO=45 WHERE ID=1;

ALTER TABLE CEMITA
DROP COLUMN PAPALO;

SELECT * FROM  CEMITA;

-- VISTA - ES UNA TABLA VIRTUAL QUE ALMACENA UNA CONSULTA


SELECT * FROM domicilio1;

CREATE OR REPLACE VIEW W_CP AS 
SELECT CP FROM domicilio1;

SELECT * FROM W_CP;

CREATE OR REPLACE VIEW V_INFODEP AS 
SELECT Ename, Puesto, Sal FROM EMPLEADOSMTI;

SELECT * FROM V_INFODEP;

CREATE OR REPLACE VIEW V_INFDP AS 
SELECT Dname, Loc FROM DEPARTAMENTOSMTI;

SELECT * FROM V_INFDP;

CREATE OR REPLACE VIEW V_CEM AS 
SELECT CARNE, QUESO FROM CEMITA;

SELECT * FROM V_CEM;

-- CREAR TABLAS EXISTENTES A MODO DE COPIA

CREATE TABLE RESP_DEPARTAMENTOSMTI AS
SELECT Dname, Loc FROM DEPARTAMENTOSMTI;

SELECT * FROM DEPARTAMENTOSMTI;
SELECT * FROM RESP_DEPARTAMENTOSMTI;

CREATE TABLE RESP_CEMITA AS
SELECT CARNE, QUESO, CHILE, TIPO
FROM PICANTE
INNER JOIN CEMITA
ON cemita.chile = picante.id;

SELECT * FROM CEMITA;
SELECT * FROM RESP_CEMITA;

CREATE TABLE RESP_MTI AS
SELECT  Ename, Puesto, Sal, Dname, Loc
FROM DEPARTAMENTOSMTI
INNER JOIN EMPLEADOSMTI
ON empleadosmti.id_depto = departamentosmti.deptno;

SELECT * FROM RESP_MTI;

------ PROCEDIMIENTO ALMACENADOS - ES UN CONJUNTO DE INSTRUCCIONES QUE SE PUEDEN LLAMAR DESDE CUALQUEIR CONSULTA,
--                                 NO ME RETORNA NADA, SE OCUPA PARA EL INSERT, UPDATE Y DELETE

CREATE OR REPLACE PROCEDURE ELIMINAR_RGD
(num_ID domicilio1.id%TYPE) 
AS
BEGIN
    DELETE FROM DOMICILIO1 WHERE ID=num_ID;
END;

SELECT *FROM domicilio1;

EXECUTE ELIMINAR_RGD(1);
---------------------------------- INSERTA UN NUEVO REGISTRO
CREATE OR REPLACE PROCEDURE IN_EMMTI(
ID_EMPLEADO empleadosmti.empno%TYPE,
NOMBRE empleadosmti.ename%TYPE,
PUESTO empleadosmti.puesto%TYPE,
DEPTO empleadosmti.id_depto%TYPE,
SALARIO empleadosmti.sal%TYPE,
COMI empleadosmti.comm%TYPE,
MRG empleadosmti.mgr%TYPE
)
AS
BEGIN
    INSERT INTO EMPLEADOSMTI VALUES(ID_EMPLEADO, NOMBRE, PUESTO, DEPTO, SALARIO, COMI, MRG);
END;

EXECUTE IN_EMMTI(1007, 'JAVIER', 'JEFE', 20, 20500, 900, 7544);

SELECT * FROM EMPLEADOSMTI;
---------------------------------- ACTUALIZAR UN VALOR DE LAS COLUMNAS
CREATE OR REPLACE PROCEDURE ACTU_EMMTI
(ID_EMPLEADO empleadosmti.empno%TYPE,
SALARIO empleadosmti.sal%TYPE,
COMI empleadosmti.comm%TYPE) 
AS
BEGIN
    UPDATE EMPLEADOSMTI SET sal=SALARIO, comm=COMI WHERE empno=ID_EMPLEADO;
END;

EXECUTE ACTU_EMMTI(1007, 35000, 5000);
SELECT * FROM EMPLEADOSMTI;
---------------------------------- ELIMINAR REGISTRO
CREATE OR REPLACE PROCEDURE ELIM_EMMTI
(ID_EMPLEADO empleadosmti.empno%TYPE) 
AS
BEGIN
    DELETE FROM EMPLEADOSMTI WHERE empno=ID_EMPLEADO;
END;

EXECUTE elim_emmti(1007);

SELECT * FROM EMPLEADOSMTI;


CREATE OR REPLACE PROCEDURE ACTUlZR_EMMTI
(ID_EMPLEADO NUMBER,
CAMPO NVARCHAR2,
VALOR NVARCHAR2)
AS
BEGIN
    CASE CAMPO
    WHEN 'SALARIO' THEN UPDATE EMPLEADOSMTI SET Sal=TO_NUMBER(VALOR)  WHERE Empno=ID_EMPLEADO;
    WHEN 'COMI' THEN UPDATE EMPLEADOSMTI SET  Comm=TO_NUMBER(VALOR) WHERE Empno=ID_EMPLEADO;
    WHEN 'MGR' THEN UPDATE EMPLEADOSMTI SET Mgr=TO_NUMBER(VALOR) WHERE empno=ID_EMPLEADO;
    END CASE;
END;

EXECUTE ACTUlZR_EMMTI(7698, 'SALARIO', 5000);

SELECT * FROM EMPLEADOSMTI;

--------------- FUNCIONES -- ES UN CONJUNTO DE INSTRUCCION Y SIEMPRE NOS RETORNA ALGO
CREATE TABLE LIBROS_BIBLIOT(
ID NUMBER PRIMARY KEY NOT NULL,
CODIGO NUMBER NOT NULL,
TITULO NVARCHAR2(50) NOT NULL,
NUM_PAG NUMBER NOT NULL,
AUTOR NVARCHAR2(50) NOT NULL,
PRECIO NUMBER NOT NULL
);

INSERT INTO libros_bibliot VALUES(1, 425, 'EL PRINCIPITO', 200, 'VICTOR', 350);
INSERT INTO libros_bibliot VALUES(2, 426, 'REBELION', 300, 'JESUS', 150);
INSERT INTO libros_bibliot VALUES(3, 427, 'VAQUERO', 120, 'ADAN', 450);
INSERT INTO libros_bibliot VALUES(4, 428, 'JAVA', 1000, 'LORENZO', 780);
COMMIT;

SELECT * FROM libros_bibliot;

CREATE OR REPLACE FUNCTION F_CALCULAIVA(VALOR NUMBER)
RETURN NUMBER
IS
BEGIN
    RETURN VALOR+(VALOR*0.16);
END;

SELECT TITULO, PRECIO, F_CALCULAIVA(PRECIO) AS PRECIO_CON_IVA, F_CALFINP( F_CALCULAIVA(PRECIO)) AS PRECIO_FINAL, F_TIPOLIB(NUM_PAG) AS TIPO FROM libros_bibliot;

CREATE OR REPLACE FUNCTION F_CALFINP(VALOR NUMBER)
RETURN NUMBER
IS
BEGIN
    RETURN VALOR+(VALOR*0.13);
END;

CREATE OR REPLACE FUNCTION F_TIPOLIB(VALOR NUMBER)
RETURN NVARCHAR2
IS
BEGIN
    CASE 
    WHEN VALOR BETWEEN 0 AND 150 THEN RETURN 'REVISTA';
    WHEN VALOR BETWEEN 150 AND 900  THEN RETURN 'LIBRO';
    WHEN VALOR > 900 THEN RETURN 'ENCICLOPEDIA';
    END CASE;
END;

------------------------------ CREAR UNA BASE DE DATOS DE YOUTUBE
---








